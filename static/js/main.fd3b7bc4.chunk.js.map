{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","handleOnChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAO,SAACC,GAAD,OAChB,sBAAKC,UAAY,iBAAjB,UACG,qBAAKC,IAAI,UACRC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEH,mCAAML,EAAMI,QAAQE,QACpB,4BAAIN,EAAMI,QAAQG,aCLbC,EAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SAEMD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAAUA,GAAtBA,EAAQC,UCJhBM,G,YAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIZ,UAAY,SACZa,KAAK,SACLC,YAAaH,EACbI,SAAUH,MCiCHI,E,kDAnCb,aAAc,IAAD,8BACX,gBAaFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAY,IAJH,E,gEAQO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACX,SAAUoB,S,+BAOjC,IAAD,EAC2BC,KAAKN,MAA/Bf,EADD,EACCA,SAAWY,EADZ,EACYA,YACZU,EAAmBtB,EAASuB,QAAO,SAAAvB,GAAQ,OAC/CA,EAASH,KAAK2B,cAAcC,SAASb,EAAYY,kBAEnD,OACE,sBAAKhC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBACvBC,aAAciB,KAAKZ,iBAEnB,cAAC,EAAD,CAAUT,SAAYsB,W,GA9BZI,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fd3b7bc4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) =>(\r\n    <div className = 'card-container'>\r\n       <img alt='monster'\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        /> \r\n        <h2> {props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        {\r\n          props.monsters.map(monster => (\r\n          <Card key={monster.id} monster ={monster}/>\r\n          ))}\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeHolder, handleChange})=>(\r\n    <input \r\n        className = 'search'\r\n        type='search' \r\n        placeholder={placeHolder} \r\n        onChange={handleChange}/>\r\n)","import React from 'react';\n\nimport {CardList} from './components/card-list/card-list.component';\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField:''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  handleOnChange = e => {\n    this.setState({searchField: e.target.value})\n  }\n\n  render(){\n    const {monsters , searchField} = this.state;\n    const filteredMonsters = monsters.filter(monsters =>\n      monsters.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    return(\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeHolder='Search Monsters' \n        handleChange={this.handleOnChange}\n        />\n        <CardList monsters = {filteredMonsters}/>\n      </div>\n    );\n  }\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}